package simpledb.storage;

import simpledb.common.Database;
import simpledb.common.DbException;
import simpledb.common.Debug;
import simpledb.common.Catalog;
import simpledb.transaction.TransactionId;

import java.util.*;
import java.io.*;

/**
 * Each instance of HeapPage stores data for one page of HeapFiles and
 * implements the Page interface that is used by BufferPool.
 *
 * @see HeapFile
 * @see BufferPool
 */
public class HeapPage implements Page {

	final HeapPageId pid;
	final TupleDesc td;
	final byte[] header;
	final Tuple[] tuples;
	final int numSlots;
	private int lastIndex;
	private TransactionId transactionId;

	byte[] oldData;
	private final Byte oldDataLock = (byte) 0;

	/**
	 * Create a HeapPage from a set of bytes of data read from disk.
	 * The format of a HeapPage is a set of header bytes indicating
	 * the slots of the page that are in use, some number of tuple slots.
	 * Specifically, the number of tuples is equal to: <p>
	 * floor((BufferPool.getPageSize()*8) / (tuple size * 8 + 1))
	 * <p> where tuple size is the size of tuples in this
	 * database table, which can be determined via {@link Catalog#getTupleDesc}.
	 * The number of 8-bit header words is equal to:
	 * <p>
	 * ceiling(no. tuple slots / 8)
	 * <p>
	 *
	 * @see Database#getCatalog
	 * @see Catalog#getTupleDesc
	 * @see BufferPool#getPageSize()
	 */
	public HeapPage(HeapPageId id, byte[] data) throws IOException {
		this.pid = id;
		this.td = Database.getCatalog().getTupleDesc(id.getTableId());
		this.numSlots = getNumTuples();
		lastIndex = 0;
		DataInputStream dis = new DataInputStream(new ByteArrayInputStream(data));

		// allocate and read the header slots of this page
		header = new byte[getHeaderSize()];
		for (int i = 0; i < header.length; i++)
			header[i] = dis.readByte();

		tuples = new Tuple[numSlots];
		try {
			// allocate and read the actual records of this page
			for (int i = 0; i < tuples.length; i++) {
				tuples[i] = readNextTuple(dis, i);
				if (tuples[i] != null) {
					lastIndex += 1;
				}
			}
		} catch (NoSuchElementException e) {
			e.printStackTrace();
		}
		dis.close();
		setBeforeImage();
	}

	/**
	 * 计算一个page里能放多少tuple, 单位是bit, page的bit / 单个tuple所需的bit + 1
	 */
	private int getNumTuples() {
		return (int) Math.floor((BufferPool.getPageSize() * 8.0) / (td.getSize() * 8 + 1.0));
	}

	/**
	 * 计算page的header占用byte数，一个tuple占一位，因此 / 8 = byte数
	 */
	private int getHeaderSize() {
		return (int) Math.ceil(getNumTuples() / 8.0);
	}

	/**
	 * Return a view of this page before it was modified
	 * -- used by recovery
	 */
	public HeapPage getBeforeImage() {
		try {
			byte[] oldDataRef = null;
			synchronized (oldDataLock) {
				oldDataRef = oldData;
			}
			return new HeapPage(pid, oldDataRef);
		} catch (IOException e) {
			e.printStackTrace();
			//should never happen -- we parsed it OK before!
			System.exit(1);
		}
		return null;
	}

	public void setBeforeImage() {
		synchronized (oldDataLock) {
			oldData = getPageData().clone();
		}
	}

	/**
	 * @return the PageId associated with this page.
	 */
	public HeapPageId getId() {
		return pid;
	}

	/**
	 * Suck up tuples from the source file.
	 */
	private Tuple readNextTuple(DataInputStream dis, int slotId) throws NoSuchElementException {
		/*
		* 没有tuple, 返回null
		* */
		if (!isSlotUsed(slotId)) {
			for (int i = 0; i < td.getSize(); i++) {
				try {
					dis.readByte();
				} catch (IOException e) {
					throw new NoSuchElementException("error reading empty tuple");
				}
			}
			return null;
		}

		// read fields in the tuple
		Tuple t = new Tuple(td);
		RecordId rid = new RecordId(pid, slotId);
		t.setRecordId(rid);
		try {
			for (int j = 0; j < td.numFields(); j++) {
				Field f = td.getFieldType(j).parse(dis);
				t.setField(j, f);
			}
		} catch (java.text.ParseException e) {
			e.printStackTrace();
			throw new NoSuchElementException("parsing error!");
		}

		return t;
	}

	/**
	 * Generates a byte array representing the contents of this page.
	 * Used to serialize this page to disk.
	 * <p>
	 * The invariant here is that it should be possible to pass the byte
	 * array generated by getPageData to the HeapPage constructor and
	 * have it produce an identical HeapPage object.
	 *
	 * @return A byte array correspond to the bytes of this page.
	 * @see #HeapPage
	 */
	public byte[] getPageData() {
		int len = BufferPool.getPageSize();
		ByteArrayOutputStream baos = new ByteArrayOutputStream(len);
		DataOutputStream dos = new DataOutputStream(baos);

		// create the header of the page
		for (byte b : header) {
			try {
				dos.writeByte(b);
			} catch (IOException e) {
				// this really shouldn't happen
				e.printStackTrace();
			}
		}

		// create the tuples
		for (int i = 0; i < tuples.length; i++) {

			// empty slot
			if (!isSlotUsed(i)) {
				for (int j = 0; j < td.getSize(); j++) {
					try {
						dos.writeByte(0);
					} catch (IOException e) {
						e.printStackTrace();
					}

				}
				continue;
			}

			// non-empty slot
			for (int j = 0; j < td.numFields(); j++) {
				Field f = tuples[i].getField(j);
				try {
					f.serialize(dos);

				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		// padding
		int zerolen = BufferPool.getPageSize() - (header.length + td.getSize() * tuples.length); //- numSlots * td.getSize();
		byte[] zeroes = new byte[zerolen];
		try {
			dos.write(zeroes, 0, zerolen);
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			dos.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return baos.toByteArray();
	}

	/**
	 * Static method to generate a byte array corresponding to an empty
	 * HeapPage.
	 * Used to add new, empty pages to the file. Passing the results of
	 * this method to the HeapPage constructor will create a HeapPage with
	 * no valid tuples in it.
	 *
	 * @return The returned ByteArray.
	 */
	public static byte[] createEmptyPageData() {
		int len = BufferPool.getPageSize();
		return new byte[len]; //all 0
	}

	/**
	 * Delete the specified tuple from the page; the corresponding header bit should be updated to reflect
	 * that it is no longer stored on any page.
	 *
	 * @param t The tuple to delete
	 * @throws DbException if this tuple is not on this page, or tuple slot is
	 *                     already empty.
	 */
	public void deleteTuple(Tuple t) throws DbException {
		RecordId recordId = t.getRecordId();
		if (!isSlotUsed(recordId.getTupleNumber())) {
			throw new DbException(String.format("tuple with no: %d doesn't exist on page: %d", recordId.getTupleNumber(), recordId.getPageId().getPageNumber()));
		}
		Tuple tuple = tuples[recordId.getTupleNumber()];
		if (tuple.equals(t)) {
			tuples[recordId.getTupleNumber()] = null;
		} else {
			throw new DbException(String.format("tuple with no: %d doesn't exist on page: %d", recordId.getTupleNumber(), recordId.getPageId().getPageNumber()));
		}
		byte b = header[recordId.getTupleNumber() / 8];
		switch (recordId.getTupleNumber() % 8) {
			case 0: {
				b &= 0b11111110;
				break;
			}
			case 1: {
				b &= 0b11111101;
				break;
			}
			case 2: {
				b &= 0b11111011;
				break;
			}
			case 3: {
				b &= 0b11110111;
				break;
			}
			case 4: {
				b &= 0b11101111;
				break;
			}
			case 5: {
				b &= 0b11011111;
				break;
			}
			case 6: {
				b &= 0b10111111;
				break;
			}
			case 7: {
				b &= 0b01111111;
				break;
			}
		}
		header[recordId.getTupleNumber() / 8] = b;
	}

	/**
	 * Adds the specified tuple to the page;  the tuple should be updated to reflect
	 * that it is now stored on this page.
	 *
	 * @param t The tuple to add.
	 * @throws DbException if the page is full (no empty slots) or tupledesc
	 *                     is mismatch.
	 */
	public void insertTuple(Tuple t) throws DbException {
		if (getNumEmptySlots() == 0) {
			throw new DbException("page is full, can't add new tuple");
		}
		t.setRecordId(new RecordId(pid, lastIndex));
		tuples[lastIndex] = t;
		markSlotUsed(lastIndex, true);
		lastIndex += 1;
	}

	/**
	 * Marks this page as dirty/not dirty and record that transaction
	 * that did the dirtying
	 */
	public void markDirty(boolean dirty, TransactionId tid) {
		if (dirty) {
			transactionId = tid;
		} else {
			transactionId = null;
		}
	}

	/**
	 * Returns the tid of the transaction that last dirtied this page, or null if the page is not dirty
	 */
	public TransactionId isDirty() {
		return transactionId;
	}

	/**
	 * Returns the number of empty slots on this page.
	 */
	public int getNumEmptySlots() {
		int sum = 0;
		for (byte b : header) {
			// 0b11111111 = -1，即全部占用
			if (b == 0) {
				sum += 8;
			} else if (b != -1) {
				String bitStr = byteToBit(b);
				for (char c : bitStr.toCharArray()) {
					if (c == '0') {
						sum += 1;
					}
				}
			}
		}
		return sum;
	}

	/**
	 * Returns true if associated slot on this page is filled.
	 */
	public boolean isSlotUsed(int i) {
		byte b = header[i / 8];
		String bitStr = byteToBit(b);
		return bitStr.charAt(bitStr.length() - 1 - (i % 8)) == '1';
	}

	private String byteToBit(byte b) {
		return "" + (byte) ((b >> 7) & 0x1) +
			(byte) ((b >> 6) & 0x1) +
			(byte) ((b >> 5) & 0x1) +
			(byte) ((b >> 4) & 0x1) +
			(byte) ((b >> 3) & 0x1) +
			(byte) ((b >> 2) & 0x1) +
			(byte) ((b >> 1) & 0x1) +
			(byte) ((b) & 0x1);
	}

	/**
	 * Abstraction to fill or clear a slot on this page.
	 */
	private void markSlotUsed(int i, boolean value) {
		byte b = header[i / 8];
		switch (i % 8) {
			case 0: {
				b |= 0b00000001;
				break;
			}
			case 1: {
				b |= 0b00000010;
				break;
			}
			case 2: {
				b |= 0b00000100;
				break;
			}
			case 3: {
				b |= 0b00001000;
				break;
			}
			case 4: {
				b |= 0b00010000;
				break;
			}
			case 5: {
				b |= 0b00100000;
				break;
			}
			case 6: {
				b |= 0b01000000;
				break;
			}
			case 7: {
				b |= 0b10000000;
				break;
			}
		}
		header[i / 8] = b;
	}

	/**
	 * @return an iterator over all tuples on this page (calling remove on this iterator throws an UnsupportedOperationException)
	 * (note that this iterator shouldn't return tuples in empty slots!)
	 */
	public Iterator<Tuple> iterator() {
		return new ArrayList<>(Arrays.asList(tuples)).stream().filter(Objects::nonNull).iterator();
	}
}

