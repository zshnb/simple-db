package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * 实现join语句
 */
public class Join extends Operator {

	private static final long serialVersionUID = 1L;
	private JoinPredicate joinPredicate;
	private OpIterator child1;
	private OpIterator child2;
	private TupleDesc tupleDesc;
	private Queue<Tuple> joinedTuples;
	private Iterator<Tuple> iterator;

	/**
	 * Constructor. Accepts two children to join and the predicate to join them
	 * on
	 *
	 * @param p      The predicate to use to join the children
	 * @param child1 Iterator for the left(outer) relation to join
	 * @param child2 Iterator for the right(inner) relation to join
	 */
	public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
		this.joinPredicate = p;
		this.child1 = child1;
		this.child2 = child2;
		TupleDesc tupleDesc1 = child1.getTupleDesc();
		TupleDesc tupleDesc2 = child2.getTupleDesc();
		tupleDesc = TupleDesc.merge(tupleDesc1, tupleDesc2);
		joinedTuples = new ArrayDeque<>();
		try {
			this.child1.open();
			while (child1.hasNext()) {
				Tuple tuple1 = child1.next();
				// 每次迭代前打开迭代器，确保从头开始
				this.child2.open();
				while (child2.hasNext()) {
					Tuple tuple2 = child2.next();
					if (joinPredicate.filter(tuple1, tuple2)) {
						Tuple result = new Tuple(tupleDesc);
						for (int i = 0; i < tuple1.getTupleDesc().numFields(); i++) {
							result.setField(i, tuple1.getField(i));
						}
						for (int i = 0; i < tuple2.getTupleDesc().numFields(); i++) {
							result.setField(i + tuple1.getTupleDesc().numFields(), tuple2.getField(i));
						}
						joinedTuples.add(result);
					}
				}
				child1.remove();
			}
			iterator = joinedTuples.iterator();
		} catch (TransactionAbortedException | DbException e) {
			throw new RuntimeException(e);
		}
	}

	public JoinPredicate getJoinPredicate() {
		return joinPredicate;
	}

	/**
	 * @return the field name of join field1. Should be quantified by
	 * alias or table name.
	 */
	public String getJoinField1Name() {
		return child1.getTupleDesc().getFieldName(joinPredicate.getField1());
	}

	/**
	 * @return the field name of join field2. Should be quantified by
	 * alias or table name.
	 */
	public String getJoinField2Name() {
		return child2.getTupleDesc().getFieldName(joinPredicate.getField2());
	}

	/**
	 * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
	 * implementation logic.
	 */
	public TupleDesc getTupleDesc() {
		return tupleDesc;
	}

	public void open() throws DbException, NoSuchElementException,
		TransactionAbortedException {
		super.open();
	}

	public void close() {
		super.close();
		child1.close();
		child2.close();
	}

	public void rewind() throws DbException, TransactionAbortedException {
		child1.rewind();
		child2.rewind();
		iterator = joinedTuples.iterator();
	}

	/**
	 * Returns the next tuple generated by the join, or null if there are no
	 * more tuples. Logically, this is the next tuple in r1 cross r2 that
	 * satisfies the join predicate. There are many possible implementations;
	 * the simplest is a nested loops join.
	 * <p>
	 * Note that the tuples returned from this particular implementation of Join
	 * are simply the concatenation of joining tuples from the left and right
	 * relation. Therefore, if an equality predicate is used there will be two
	 * copies of the join attribute in the results. (Removing such duplicate
	 * columns can be done with an additional projection operator if needed.)
	 * <p>
	 * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
	 * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
	 *
	 * @return The next matching tuple.
	 * @see JoinPredicate#filter
	 */
	protected Tuple fetchNext() throws TransactionAbortedException, DbException {
		if (iterator.hasNext()) {
			return iterator.next();
		}
		return null;
	}

	@Override
	public OpIterator[] getChildren() {
		return new OpIterator[]{child1, child2};
	}

	@Override
	public void setChildren(OpIterator[] children) {
		if (children.length != 2) {
			throw new RuntimeException("Join setChildren's length must be 2");
		}
		child1 = children[0];
		child2 = children[1];
	}

}
